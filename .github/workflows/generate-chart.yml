name: Generate Stock OHLC Charts

on:
  # 1. 手动触发（支持调试+指定股票）
  workflow_dispatch:
    inputs:
      debug_mode:
        description: "启用调试模式（输出详细日志）"
        required: false
        default: false
        type: boolean
      tickers:
        description: "指定股票代码（逗号分隔，如0700.HK,0005.HK）"
        required: false
        default: "0700.HK"
        type: string
  
  # 2. 定时任务：香港时间每晚10点（UTC14:00，周一至周五）
  schedule:
    - cron: "0 14 * * 1-5"
  
  # 3. 代码变更触发（main分支/PR）
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ------------------------------
# 全局配置（含唯一运行ID，避免工件覆盖）
# ------------------------------
env:
  PYTHON_VERSION: "3.10"
  BASE_CACHE_DIR: "stock_data"
  WORKFLOW_PREFIX: "stock-charts-${{ github.run_id }}"  # 唯一标识，避免不同运行工件重名
  REQUIREMENTS_FILE: "requirements.txt"
  LOG_RETENTION_DAYS: 3

jobs:
  # ------------------------------
  # 配置准备任务（输出股票列表+调试模式）
  # ------------------------------
  setup-config:
    name: Setup Configuration
    runs-on: ubuntu-latest
    outputs:
      tickers: ${{ steps.setup.outputs.tickers }}
      debug_mode: ${{ steps.setup.outputs.debug_mode }}
      run_id: ${{ github.run_id }}  # 传递运行ID给后续任务
    steps:
      - name: Setup Tickers and Debug Mode
        id: setup
        run: |
          # 处理股票代码（输入优先，否则用默认）
          if [[ -n "${{ github.event.inputs.tickers }}" ]]; then
            TICKERS="${{ github.event.inputs.tickers }}"
          else
            TICKERS="0700.HK"
          fi
          
          # 转换为JSON数组（兼容矩阵策略）
          TICKER_JSON=$(echo "$TICKERS" | tr ',' '
' | jq -R . | jq -s .)
          echo "tickers=$TICKER_JSON" >> $GITHUB_OUTPUT
          
          # 处理调试模式（空值默认false）
          DEBUG_MODE="${{ github.event.inputs.debug_mode }}"
          [[ -z "$DEBUG_MODE" ]] && DEBUG_MODE="false"
          echo "debug_mode=$DEBUG_MODE" >> $GITHUB_OUTPUT
          echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          
          echo "=== 配置完成 ==="
          echo "股票代码: $TICKERS"
          echo "调试模式: $DEBUG_MODE"
          echo "运行ID: ${{ github.run_id }}"

  # ------------------------------
  # 核心任务：生成图表（矩阵策略，按股票并行）
  # ------------------------------
  generate-charts:
    name: "Generate Chart - ${{ matrix.ticker }}"
    runs-on: ubuntu-latest
    needs: setup-config  # 依赖配置任务
    timeout-minutes: 25
    strategy:
      matrix:
        ticker: ${{ fromJson(needs.setup-config.outputs.tickers) }}  # 从配置任务读取股票列表
    
    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 设置Python环境（缓存pip依赖）
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # 3. 安装依赖（优先用requirements.txt，否则手动安装）
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ -f "${{ env.REQUIREMENTS_FILE }}" ]]; then
            pip install -r ${{ env.REQUIREMENTS_FILE }}
          else
            pip install pandas plotly yfinance pytz pydantic
          fi
          pip list | grep -E "pandas|plotly|yfinance|pytz|pydantic"  # 验证依赖版本
          echo "✅ 依赖安装完成"

      # 4. 创建数据缓存目录
      - name: Create Data Directory
        run: |
          mkdir -p ${{ env.BASE_CACHE_DIR }}
          echo "✅ 数据目录创建完成: ${{ env.BASE_CACHE_DIR }}"

      # 5. 运行生成脚本（传递环境变量）
      - name: Run Generation Script
        id: generate-script
        env:
          DEBUG_MODE: ${{ needs.setup-config.outputs.debug_mode }}
          TICKER: ${{ matrix.ticker }}
          CACHE_DIR: ${{ env.BASE_CACHE_DIR }}
        run: |
          echo "=== 开始生成股票图表 ==="
          echo "股票代码: $TICKER | 调试模式: $DEBUG_MODE"
          
          # 设置Python脚本可用的环境变量
          export TICKER="$TICKER"
          export DEBUG_MODE="$DEBUG_MODE"
          export CACHE_DIR="$CACHE_DIR"
          
          # 运行脚本（允许失败，后续验证文件）
          set +e
          python main.py
          EXIT_CODE=$?
          set -e  # 恢复严格模式
          
          # 输出结果
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          if [[ $EXIT_CODE -eq 0 ]]; then
            echo "✅ 股票 $TICKER 处理成功"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ 股票 $TICKER 处理失败（退出码: $EXIT_CODE）"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      # 6. 验证输出文件（HTML/CSV/日志）
      - name: Verify Output Files
        id: verify-files
        run: |
          echo "=== 验证输出文件 ==="
          HTML_FILE="${{ env.BASE_CACHE_DIR }}/ohlc_chart_${{ matrix.ticker }}.html"
          CSV_FILE="${{ env.BASE_CACHE_DIR }}/${{ matrix.ticker }}.csv"
          LOG_FILE="stock_chart.log"
          
          # 验证HTML
          if [[ -f "$HTML_FILE" ]]; then
            HTML_SIZE=$(ls -lh "$HTML_FILE" | awk '{print $5}')
            echo "✅ HTML文件存在: $HTML_FILE (大小: $HTML_SIZE)"
            echo "html_exists=true" >> $GITHUB_OUTPUT
          else
            echo "❌ HTML文件不存在: $HTML_FILE"
            echo "html_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # 验证CSV（至少有表头+1行数据）
          if [[ -f "$CSV_FILE" ]]; then
            CSV_LINES=$(wc -l < "$CSV_FILE" 2>/dev/null || echo 0)
            if [[ $CSV_LINES -gt 1 ]]; then
              echo "✅ CSV文件有效: $CSV_FILE (行数: $CSV_LINES)"
              echo "csv_exists=true" >> $GITHUB_OUTPUT
            else
              echo "❌ CSV文件无效（行数不足）: $CSV_FILE"
              echo "csv_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ CSV文件不存在: $CSV_FILE"
            echo "csv_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # 验证日志
          if [[ -f "$LOG_FILE" ]]; then
            LOG_SIZE=$(ls -lh "$LOG_FILE" | awk '{print $5}')
            echo "✅ 日志文件存在: $LOG_FILE (大小: $LOG_SIZE)"
            echo "log_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 日志文件不存在: $LOG_FILE"
            echo "log_exists=false" >> $GITHUB_OUTPUT
          fi

      # 7. 上传HTML图表（仅成功时，带唯一运行ID）
      - name: Upload HTML Chart
        if: steps.verify-files.outputs.html_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-chart
          path: ${{ env.BASE_CACHE_DIR }}/ohlc_chart_${{ matrix.ticker }}.html
          retention-days: 7  # 保留7天

      # 8. 上传CSV数据（仅成功时）
      - name: Upload CSV Data
        if: steps.verify-files.outputs.csv_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-data
          path: ${{ env.BASE_CACHE_DIR }}/${{ matrix.ticker }}.csv
          retention-days: 7

      # 9. 上传日志文件（仅存在时）
      - name: Upload Log Files
        if: steps.verify-files.outputs.log_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-logs
          path: stock_chart.log
          retention-days: ${{ env.LOG_RETENTION_DAYS }}
          if-no-files-found: ignore

      # 10. 上传完整数据备份（可选）
      - name: Upload Full Backup
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-backup
          path: ${{ env.BASE_CACHE_DIR }}/
          retention-days: 3
          if-no-files-found: ignore

      # 11. 单任务状态输出
      - name: Completion Status
        run: |
          echo "=== 单任务完成状态 ==="
          echo "股票代码: ${{ matrix.ticker }}"
          echo "退出码: ${{ steps.generate-script.outputs.exit_code }}"
          echo "HTML: ${{ steps.verify-files.outputs.html_exists }}"
          echo "CSV: ${{ steps.verify-files.outputs.csv_exists }}"
          if [[ ${{ steps.generate-script.outputs.exit_code }} -eq 0 ]]; then
            echo "🎉 任务成功"
          else
            echo "⚠️ 任务失败"
          fi

      # 12. 保存矩阵任务结果（股票+状态）
      - name: Save Matrix Result
        run: |
          CLEAN_STATUS=$(echo "${{ steps.generate-script.outputs.status }}" | xargs)
          echo "${{ matrix.ticker }}:$CLEAN_STATUS" >> matrix_task_results.txt
          echo "💾 结果已保存: ${{ matrix.ticker }} → $CLEAN_STATUS"

      # 13. 上传矩阵结果（供汇总报告使用）
      - name: Upload Matrix Results
        uses: actions/upload-artifact@v4
        with:
          name: matrix-task-results-${{ needs.setup-config.outputs.run_id }}
          path: matrix_task_results.txt
          retention-days: ${{ env.LOG_RETENTION_DAYS }}
          if-no-files-found: ignore

  # ------------------------------
  # 汇总报告（无论成功失败都运行）
  # ------------------------------
  summary-report:
    name: Summary Report
    runs-on: ubuntu-latest
    needs: 
      - setup-config
      - generate-charts
    if: always()  # 即使前置任务失败也运行
    steps:
      # 1. 下载矩阵任务结果
      - name: Download Matrix Results
        uses: actions/download-artifact@v4
        with:
          name: matrix-task-results-${{ needs.setup-config.outputs.run_id }}

      # 2. 解析矩阵结果（统计成功/失败）
      - name: Parse Matrix Results
        id: parse-results
        run: |
          echo "📊 解析矩阵任务结果..."
          SUCCESS=0
          FAILURE=0
          UNKNOWN=0
          RESULT_FILE="matrix_task_results.txt"
          
          if [[ -f "$RESULT_FILE" ]]; then
            while IFS=':' read -r TICKER STATUS; do
              TICKER=$(echo "$TICKER" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              STATUS=$(echo "$STATUS" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr '[:upper:]' '[:lower:]')
              
              case "$STATUS" in
                success) 
                  echo "   - $TICKER: ✅ 成功"
                  ((SUCCESS++))
                  ;;
                failure)
                  echo "   - $TICKER: ❌ 失败"
                  ((FAILURE++))
                  ;;
                *)
                  echo "   - $TICKER: ⚠️ 未知状态"
                  ((UNKNOWN++))
                  ;;
              esac
            done < "$RESULT_FILE"
          else
            echo "⚠️ 未找到结果文件: $RESULT_FILE"
          fi
          
          # 统计并保存到环境变量
          TOTAL=$((SUCCESS + FAILURE + UNKNOWN))
          echo "📈 状态统计: 成功 $SUCCESS / 失败 $FAILURE / 总计 $TOTAL"
          echo "summary_success=$SUCCESS" >> $GITHUB_ENV
          echo "summary_failure=$FAILURE" >> $GITHUB_ENV
          echo "summary_total=$TOTAL" >> $GITHUB_ENV

      # 3. 生成汇总报告
      - name: Generate Summary Report
        run: |
          echo "📊 === 股票图表生成工作流汇总 ==="
          echo "🏷️ 工作流: ${{ github.workflow }}"
          echo "🔢 运行ID: ${{ github.run_id }}"
          echo "⚡ 触发方式: ${{ github.event_name }}"
          [[ "${{ github.event_name }}" == "schedule" ]] && \
            echo "🕒 触发时间: 每日香港时间22:00 (UTC14:00)" || \
            echo "🕒 触发时间: ${{ github.event.timestamp || '手动触发' }}"
          echo "📈 目标股票: ${{ needs.setup-config.outputs.tickers }}"
          echo "🐛 调试模式: ${{ needs.setup-config.outputs.debug_mode }}"
          echo ""
          echo "📋 核心任务状态:"
          echo "   - 配置任务: ${{ needs.setup-config.result }} (运行ID: ${{ needs.setup-config.outputs.run_id }})"
          echo "   - 图表生成: ${{ needs.generate-charts.result }} (处理股票: ${{ needs.generate-charts.strategy.matrix.ticker | join(', ') }})"
          echo ""
          echo "📊 股票处理详情:"
          echo "   成功: ${{ env.summary_success || 0 }}"
          echo "   失败: ${{ env.summary_failure || 0 }}"
          echo "   总计: ${{ env.summary_total || 0 }}"
          echo ""
          echo "📁 工件下载:"
          echo "   - HTML图表: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-chart"
          echo "   - CSV数据: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-data"
          echo "   - 运行日志: ${{ env.WORKFLOW_PREFIX }}-${{ matrix.ticker }}-logs"
          echo ""
          echo "✅ 工作流执行完毕！"
          echo "================================"

# ------------------------------
# 并发控制（同一工作流同一分支取消之前的运行）
# ------------------------------
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
