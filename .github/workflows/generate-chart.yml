name: Generate Stock OHLC Charts

on:
  # 1. 手动触发（支持调试+指定股票）
  workflow_dispatch:
    inputs:
      debug_mode:
        description: "启用调试模式（输出详细日志）"
        required: false
        default: false
        type: boolean
      tickers:
        description: "指定股票代码（逗号分隔，如0700.HK,0005.HK）"
        required: false
        default: "0700.HK"
        type: string
  
  # 2. 定时任务：香港时间每晚10点（UTC14:00，周一至周五）
  schedule:
    - cron: "0 14 * * 1-5"
  
  # 3. 代码变更触发（main分支/PR）
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ------------------------------
# 全局配置
# ------------------------------
env:
  PYTHON_VERSION: "3.10"
  BASE_CACHE_DIR: "stock_data"
  WORKFLOW_PREFIX: "stock-charts-${{ github.run_id }}"
  REQUIREMENTS_FILE: "requirements.txt"
  LOG_RETENTION: 3

jobs:
  # ------------------------------
  # 配置准备任务
  # ------------------------------
  setup-config:
    name: Setup Configuration
    runs-on: ubuntu-latest
    outputs:
      tickers: ${{ steps.setup.outputs.tickers }}
      debug_mode: ${{ steps.setup.outputs.debug_mode }}
    steps:
      - name: Setup Tickers and Debug Mode
        id: setup
        run: |
          # 处理股票代码
          if [[ -n "${{ github.event.inputs.tickers }}" ]]; then
            TICKERS="${{ github.event.inputs.tickers }}"
          else
            TICKERS="0700.HK"
          fi
          
          # 转换为JSON数组格式
          TICKER_JSON=$(echo "$TICKERS" | jq -R -s -c 'split(",")')
          echo "tickers=$TICKER_JSON" >> $GITHUB_OUTPUT
          
          # 调试模式
          DEBUG_MODE="${{ github.event.inputs.debug_mode || 'false' }}"
          echo "debug_mode=$DEBUG_MODE" >> $GITHUB_OUTPUT
          
          echo "配置完成:"
          echo "股票代码: $TICKERS"
          echo "调试模式: $DEBUG_MODE"

  # ------------------------------
  # 核心任务：生成图表
  # ------------------------------
  generate-charts:
    name: Generate Charts for ${{ matrix.ticker }}
    runs-on: ubuntu-latest
    needs: setup-config
    timeout-minutes: 20
    strategy:
      matrix:
        ticker: ${{ fromJson(needs.setup-config.outputs.tickers) }}
    outputs:
      status: ${{ steps.generate.outputs.status }}

    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 设置Python环境
      - name: Set Up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      # 3. 安装依赖
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "${{ env.REQUIREMENTS_FILE }}" ]; then
            pip install -r ${{ env.REQUIREMENTS_FILE }}
          else
            pip install pandas plotly yfinance pytz pydantic
          fi
          echo "[INFO] 依赖安装完成"

      # 4. 创建数据目录
      - name: Create Data Directory
        run: |
          mkdir -p ${{ env.BASE_CACHE_DIR }}
          echo "[INFO] 数据目录创建完成"

      # 5. 运行生成脚本
      - name: Run Generation Script
        id: generate
        env:
          DEBUG_MODE: ${{ needs.setup-config.outputs.debug_mode }}
          TICKER: ${{ matrix.ticker }}
        run: |
          echo "[INFO] 启动脚本 - 股票: ${{ matrix.ticker }}, 调试: $DEBUG_MODE"
          
          # 设置环境变量供Python脚本使用
          export TICKER="${{ matrix.ticker }}"
          export DEBUG_MODE="$DEBUG_MODE"
          export CACHE_DIR="${{ env.BASE_CACHE_DIR }}"
          
          python main.py
          exit_code=$?
          
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "[SUCCESS] 股票 ${{ matrix.ticker }} 处理成功"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] 股票 ${{ matrix.ticker }} 处理失败"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      # 6. 验证输出文件
      - name: Verify Outputs
        id: verify
        run: |
          echo "[INFO] 验证输出文件..."
          
          # 清理股票代码中的特殊字符用于文件名
          CLEAN_TICKER=$(echo "${{ matrix.ticker }}" | sed 's/[^a-zA-Z0-9]/_/g')
          
          HTML_FILE="${{ env.BASE_CACHE_DIR }}/ohlc_chart_${{ matrix.ticker }}.html"
          CSV_FILE="${{ env.BASE_CACHE_DIR }}/${{ matrix.ticker }}.csv"
          
          echo "检查HTML文件: $HTML_FILE"
          echo "检查CSV文件: $CSV_FILE"
          
          # 验证HTML文件
          if [ -f "$HTML_FILE" ]; then
            HTML_SIZE=$(ls -lh "$HTML_FILE" | awk '{print $5}')
            echo "✅ HTML文件存在: $HTML_FILE (大小: $HTML_SIZE)"
            echo "html_exists=true" >> $GITHUB_OUTPUT
          else
            echo "❌ HTML文件不存在: $HTML_FILE"
            echo "html_exists=false" >> $GITHUB_OUTPUT
          fi
          
          # 验证CSV文件
          if [ -f "$CSV_FILE" ]; then
            CSV_LINES=$(wc -l < "$CSV_FILE" 2>/dev/null || echo "0")
            if [ "$CSV_LINES" -gt 1 ]; then
              echo "✅ CSV文件存在: $CSV_FILE (行数: $CSV_LINES)"
              echo "csv_exists=true" >> $GITHUB_OUTPUT
            else
              echo "❌ CSV文件无效: $CSV_FILE"
              echo "csv_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ CSV文件不存在: $CSV_FILE"
            echo "csv_exists=false" >> $GITHUB_OUTPUT
          fi

      # 7. 上传HTML图表
      - name: Upload HTML Artifact
        if: steps.verify.outputs.html_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-chart-${{ matrix.ticker }}
          path: ${{ env.BASE_CACHE_DIR }}/ohlc_chart_${{ matrix.ticker }}.html
          retention-days: 7
          compression-level: 0

      # 8. 上传CSV数据
      - name: Upload CSV Artifact
        if: steps.verify.outputs.csv_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-data-${{ matrix.ticker }}
          path: ${{ env.BASE_CACHE_DIR }}/${{ matrix.ticker }}.csv
          retention-days: 7
          compression-level: 0

      # 9. 上传日志文件
      - name: Upload Log Files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-logs-${{ matrix.ticker }}
          path: |
            stock_chart.log
            *.log
          retention-days: ${{ env.LOG_RETENTION }}
          if-no-files-found: ignore

      # 10. 上传所有文件作为备份
      - name: Upload All Files Backup
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_PREFIX }}-backup-${{ matrix.ticker }}
          path: ${{ env.BASE_CACHE_DIR }}/
          retention-days: 3
          if-no-files-found: ignore

      # 11. 清理临时文件（可选）
      - name: Cleanup Temporary Files
        if: always()
        run: |
          echo "[INFO] 清理临时文件..."
          # 保留缓存文件，只清理临时文件
          find . -name "*.tmp" -delete 2>/dev/null || true
          find . -name "*.temp" -delete 2>/dev/null || true

  # ------------------------------
  # 汇总报告任务
  # ------------------------------
  generate-report:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs: 
      - setup-config
      - generate-charts
    if: always()
    
    steps:
      - name: Generate Workflow Report
        run: |
          echo "📊 股票图表生成工作流报告"
          echo "================================"
          echo "工作流: ${{ github.workflow }}"
          echo "运行ID: ${{ github.run_id }}"
          echo "触发方式: ${{ github.event_name }}"
          echo "触发时间: ${{ github.event.schedule || '手动触发' }}"
          echo "股票代码: ${{ needs.setup-config.outputs.tickers }}"
          echo "调试模式: ${{ needs.setup-config.outputs.debug_mode }}"
          echo "================================"
          
          # 检查每个股票的处理状态
          echo "处理状态:"
          # 这里可以添加更详细的状态检查逻辑
          
          echo "================================"
          echo "📁 生成的Artifacts:"
          echo "- HTML图表文件"
          echo "- CSV数据文件" 
          echo "- 运行日志"
          echo "- 完整备份"
          echo "================================"

# ------------------------------
# 工作流级别配置
# ------------------------------
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
