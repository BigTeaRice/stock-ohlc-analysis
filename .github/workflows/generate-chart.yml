name: Generate Tencent Stock Chart

on:
  # 1. 手动触发（支持调试模式）
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '启用调试模式（输出详细日志）'
        required: false
        default: false
        type: boolean
  
  # 2. 自动调度：香港时间每晚10点（UTC 14:00）
  schedule:
    - cron: '0 14 * * 1-5'  # 周一至周五晚10点（香港时间）
  
  # 3. 代码推送/PR触发
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 全局环境变量（与Python脚本解耦）
env:
  PYTHON_VERSION: '3.10'
  TICKER: '0700.HK'               # 港股代码
  CACHE_DIR: 'stock_data'         # 数据缓存目录（与脚本一致）
  HTML_OUTPUT: 'ohlc_chart.html'  # 图表输出文件名（根目录）
  CSV_OUTPUT: '0700-HK.csv'       # 缓存CSV文件名（TICKER替换.为-）
  WORKFLOW_ARTIFACT_PREFIX: 'tencent-${{ env.TICKER }}'  # 工件前缀（统一命名）


jobs:
  generate-chart:
    name: Generate OHLC Chart
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      status: ${{ steps.generate.outputs.status }}

    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取所有历史（方便调试）

      # 2. 设置Python环境
      - name: Set Up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # 3. 安装依赖
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas plotly yfinance pytz
          echo "[INFO] 依赖安装完成"

      # 4. 创建缓存目录
      - name: Create Cache Directory
        run: |
          mkdir -p ${{ env.CACHE_DIR }}
          echo "[INFO] 缓存目录创建：${{ env.CACHE_DIR }}"

      # 5. 运行脚本（传递debug_mode参数）
      - name: Run Chart Generation Script
        id: generate
        run: |
          echo "[INFO] 启动图表生成脚本..."
          python main.py --debug_mode ${{ inputs.debug_mode }}
          exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -eq 0 ]; then
            echo "[SUCCESS] 脚本执行成功"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] 脚本执行失败（退出码：$exit_code）"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true  # 即使失败也继续后续步骤（方便调试）

      # 6. 验证生成文件
      - name: Verify Generated Files
        id: verify
        run: |
          echo "[INFO] 验证输出文件..."
          
          # 验证HTML图表（根目录）
          if [ -f "${{ env.HTML_OUTPUT }}" ]; then
            html_size=$(du -h "${{ env.HTML_OUTPUT }}" | cut -f1)
            echo "[SUCCESS] HTML图表存在 - 大小：$html_size"
            echo "html_exists=true" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] HTML图表未找到：${{ env.HTML_OUTPUT }}"
            echo "html_exists=false" >> $GITHUB_OUTPUT
          fi

          # 验证CSV缓存（CACHE_DIR下）
          csv_path="${{ env.CACHE_DIR }}/${{ env.CSV_OUTPUT }}"
          if [ -f "$csv_path" ]; then
            csv_size=$(du -h "$csv_path" | cut -f1)
            echo "[SUCCESS] CSV缓存存在 - 大小：$csv_size"
            echo "csv_exists=true" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] CSV缓存未找到：$csv_path"
            echo "csv_exists=false" >> $GITHUB_OUTPUT
          fi

          # 列出关键文件（调试模式必看）
          if ${{ inputs.debug_mode }}; then
            echo "[DEBUG] 根目录文件："
            ls -la .
            echo "[DEBUG] 缓存目录文件："
            ls -la ${{ env.CACHE_DIR }}
          fi

      # 7. 上传HTML图表（仅当生成成功时）
      - name: Upload HTML Artifact
        if: steps.verify.outputs.html_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_ARTIFACT_PREFIX }}-chart
          path: ${{ env.HTML_OUTPUT }}
          retention-days: 7
          compression-level: 0

      # 8. 上传CSV数据（仅当生成成功时）
      - name: Upload CSV Artifact
        if: steps.verify.outputs.csv_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_ARTIFACT_PREFIX }}-data
          path: ${{ env.CACHE_DIR }}/${{ env.CSV_OUTPUT }}
          retention-days: 7
          compression-level: 0

      # 9. 上传日志文件（如果有）
      - name: Upload Log Files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WORKFLOW_ARTIFACT_PREFIX }}-logs
          path: |
            *.log
            ${{ env.CACHE_DIR }}/*.log
          retention-days: 3
          if-no-files-found: ignore

      # 10. 发送通知（根据状态）
      - name: Success Notification
        if: success() && steps.verify.outputs.html_exists == 'true'
        run: |
          echo "🎉 图表生成成功！"
          echo "📊 访问工件：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "📁 文件：${{ env.HTML_OUTPUT }}（图表）、${{ env.CACHE_DIR }}/${{ env.CSV_OUTPUT }}（数据）"

      - name: Partial Success Notification
        if: success() && steps.verify.outputs.html_exists != 'true'
        run: |
          echo "⚠️ 脚本运行但未生成图表"
          echo "🔍 请检查日志或CSV缓存：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Failure Notification
        if: failure()
        run: |
          echo "❌ 工作流失败！"
          echo "📝 查看错误日志：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ env.WORKFLOW_ARTIFACT_PREFIX }}-logs"


  # 可选：测试任务（验证工件完整性）
  test-artifacts:
    name: Test Generated Artifacts
    runs-on: ubuntu-latest
    needs: generate-chart
    if: always()  # 即使主任务失败也运行
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Verify Artifacts
        run: |
          echo "[INFO] 下载的工件："
          ls -la test-results
          echo "[SUCCESS] 工件下载完成"
